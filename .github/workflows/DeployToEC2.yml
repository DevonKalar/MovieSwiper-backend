name: Deploy to EC2 via SSM

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to EC2
      id: deploy
      continue-on-error: true
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "set -ex",
            "echo Starting deployment",
            "cd ~/MovieSwiper-backend",
            "echo Pulling latest code",
            "git pull origin master",
            "echo Installing dependencies",
            "npm install",
            "echo Building application",
            "npm run build",
            "echo Restarting application",
            "pkill -f \"node\" || true",
            "nohup npm start > app.log 2>&1 &",
            "sleep 2",
            "tail -20 app.log",
            "echo Deployment complete!"
          ]' \
          --output text \
          --query "Command.CommandId")
        
        echo "Command ID: $COMMAND_ID"
        echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT
        
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}"
    
    - name: Get command output
      if: always()
      run: |
        echo "=== STDOUT ==="
        aws ssm get-command-invocation \
          --command-id "${{ steps.deploy.outputs.command_id }}" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --query "StandardOutputContent" \
          --output text
        
        echo ""
        echo "=== STDERR ==="
        aws ssm get-command-invocation \
          --command-id "${{ steps.deploy.outputs.command_id }}" \
          --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
          --query "StandardErrorContent" \
          --output text
